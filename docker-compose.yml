services:
  # Database Migration Service
  migrate:
    build: .
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_db
    depends_on:
      - postgres
    volumes:
      - .:/app
    command: python migrate.py
    restart: "no"

  # # FastAPI Application
  # api:
  #   build: .
  #   ports:
  #     - "8000:8000"
  #   # environment:
  #   #   - POSTGRES_HOST=postgres
  #   #   - POSTGRES_PORT=5432
  #   #   - POSTGRES_USER=postgres
  #   #   - POSTGRES_PASSWORD=postgres
  #   #   - POSTGRES_DB=keycode
  #   #   - MINIO_ENDPOINT=minio:9000
  #   #   - MINIO_ACCESS_KEY=minioadmin
  #   #   - MINIO_SECRET_KEY=minioadmin
  #   #   - MINIO_SECURE=false
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - minio
  #   volumes:
  #     - .:/app
  #   restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=keycode
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

  # MinIO Client (for bucket creation)
  minio-client:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/fastapi-bucket --ignore-existing;
      /usr/bin/mc policy set public myminio/fastapi-bucket;
      exit 0;
      "

volumes:
  postgres_data:
  minio_data:
